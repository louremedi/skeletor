$fonticon  : 'icomoon';
$token     : 'ec8dd1';

$fonticon-path  : '../font/#{$fonticon}/#{$fonticon}';

@font-face {
    font-family: $fonticon;
    src:  url('#{$fonticon-path}.eot?#{$token}');
    src:  url('#{$fonticon-path}.eot?#{$token}#iefix') format('embedded-opentype'),
          url('#{$fonticon-path}.ttf?#{$token}') format('truetype'),
          url('#{$fonticon-path}.woff?#{$token}') format('woff'),
          url('#{$fonticon-path}.svg?#{$token}##{$fonticon}') format('svg');
    font-weight: normal;
    font-style: normal;
    font-display: swap;
}

// fonticon.scss -- Icons custom for project
// http://jaydenseric.com/blog/fun-with-sass-and-font-icons
//  *
//  * Set Icons custom with optionals position and style.
//  *
//  * @mixin
//  * @section Fonts
//  * @param $position Position of icon
//  * @param $icon Name of icon
//  *  The font weight to be used.
//  * @example
//  *  @include icon(before, contact);
//  *  @include icon(after, arrow-right);
//  *  @include icon(both, star);
//  *  @include icon(before, contact) {
//         margin-right: 20px;
//     }
// For adding font icons to elements using CSS pseudo-elements
@mixin icon($position: before, $icon: false, $styles: true) {
    @if $position == both{
        $position: 'before, &:after';
    }
    // Either a :before or :after pseudo-element, or both, defaulting to :before
    &:#{$position} {
        @if $icon {
            // A particular icon has been specified
            content: "#{map-get($icons, $icon)}";
        }
        @if $styles {
            // Supportive icon styles required
            font-family: '#{$fonticon}' !important;
            font-style: normal;
            font-weight: normal;
            font-variant: normal;
            text-transform: none;
            line-height: 1;
            font-size: inherit;
            color: inherit;

            // Better Font Rendering
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            
            // Screenreaders should ignore that kind of elements
            -webkit-alt: "";
            speak: none;
        }
        // Include any extra rules supplied for the pseudo-element
        @content;
    }
}

$icons: (
    icon-info: "\e94c",
    icon-rouage-contour: "\e95a",
    icon-carre-moins-contour: "\e92d",
    icon-carre-plus-contour: "\e92e",
    icon-carre-moins: "\e92f",
    icon-carre-plus: "\e930",
    icon-plus: "\e920",
    icon-intero-point: "\e91e",
    icon-check: "\e91d",
    icon-close: "\e908",
    icon-download: "\e91c",
    icon-search: "\e911",
    icon-arrow-big-left: "\e91a",
    icon-arrow-big-right: "\e91b",
    icon-arrow-left: "\e900",
    icon-arrow-right: "\e901",
    icon-arrow-down: "\e902",
    icon-arrow-up: "\e903",
    icon-burger: "\e906",
    icon-alert: "\e904"
);

@each $icon, $value in $icons {
    .#{$icon} {
        @include icon(before, #{$icon}, false);
    }
}

[class^='icon-']
{
    &::before 
    {
        // Supportive icon styles required
        font-family: '#{$fonticon}' !important;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        line-height: 1;
        font-size: inherit;
        color: inherit;
        // Better Font Rendering
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        // Screenreaders should ignore that kind of elements
        -webkit-alt: "";
        speak: none;
    }
}
